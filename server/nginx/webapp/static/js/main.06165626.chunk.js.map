{"version":3,"sources":["assets/images/microphone.svg","assets/audio/inputs/in4.wav","assets/audio/inputs/in1.wav","assets/audio/inputs/in2.wav","assets/audio/inputs/in3.wav","assets/audio/outputs/out4.wav","assets/audio/inputs/in5.wav","assets/audio/outputs/out1.wav","assets/audio/outputs/out2.wav","assets/audio/outputs/out3.wav","assets/audio/outputs/out5.wav","App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","recording","setRecording","played","setPlayed","response","setResponse","audioRef","useRef","audiosample","played2","setPlayed2","audiosample3","played3","setPlayed3","useMediaRecorder","recordScreen","blobOptions","type","mediaStreamConstraints","audio","mediaBlob","error","status","stopRecording","startRecording","getMediaStream","useEffect","sendAudio","formData","FormData","append","axios","post","headers","then","resp","data","catch","err","console","stopPlaying","current","pause","startPlaying_sample","url","Audio","onended","event","stopPlaying_sample","play","startPlaying_sample3","stopPlaying_sample3","audioURL","output_path","speechToText","st_out","translatedText","translate_out","Container","Card","Row","Col","className","Header","Body","Form","Control","as","readOnly","style","height","value","ToggleButton","id","variant","checked","width","padding","onChange","e","path","mdiStop","color","mdiMicrophoneOutline","mdiPlayOutline","in4_sample","out4_sample","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","mediaDevices","getUserMedia","video","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06165626.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/microphone.52a4fd8a.svg\";","export default __webpack_public_path__ + \"static/media/in4.08593d7e.wav\";","export default __webpack_public_path__ + \"static/media/in1.fd56114c.wav\";","export default __webpack_public_path__ + \"static/media/in2.fd56114c.wav\";","export default __webpack_public_path__ + \"static/media/in3.b4f1abf9.wav\";","export default __webpack_public_path__ + \"static/media/out4.2620b165.wav\";","export default __webpack_public_path__ + \"static/media/in5.50ba774c.wav\";","export default __webpack_public_path__ + \"static/media/out1.275fccd3.wav\";","export default __webpack_public_path__ + \"static/media/out2.275fccd3.wav\";","export default __webpack_public_path__ + \"static/media/out3.0ed25be8.wav\";","export default __webpack_public_path__ + \"static/media/out5.d63624fd.wav\";","import React, { useEffect } from 'react'\nimport { Card, Col, Container, Form, Row, Button, ToggleButton, Image } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport microphone from './assets/images/microphone.svg'\nimport Icon from '@mdi/react'\nimport { mdiMicrophoneOutline, mdiPause, mdiPlay, mdiPlayOutline, mdiStop } from '@mdi/js'\nimport useMediaRecorder from '@wmik/use-media-recorder';\nimport axios from 'axios';\nimport useSound from 'use-sound';\nimport in1_sample from './assets/audio/inputs/in1.wav';\nimport in2_sample from './assets/audio/inputs/in2.wav';\nimport in3_sample from './assets/audio/inputs/in3.wav';\nimport in4_sample from './assets/audio/inputs/in4.wav';\nimport in5_sample from './assets/audio/inputs/in5.wav';\n\nimport out1_sample from './assets/audio/outputs/out1.wav';\nimport out2_sample from './assets/audio/outputs/out2.wav';\nimport out3_sample from './assets/audio/outputs/out3.wav';\nimport out4_sample from './assets/audio/outputs/out4.wav';\nimport out5_sample from './assets/audio/outputs/out5.wav';\n\nconst audioType = 'audio/*'\nconst URL = \"/api/predict\"\n//const URL = \"http://localhost:3000/api/predict\"\n\nfunction App() {\n  const [recording, setRecording] = React.useState(false);\n  const [played, setPlayed] = React.useState(false);\n  const [response, setResponse] = React.useState(null)\n  const audioRef = React.useRef(null)\n\n  // const [play, { stop, isPlaying }] = useSound(boopSfx);\n  // const audioElement = new Audio(boopSfx);\n  const audiosample = React.useRef(null)\n  const [played2, setPlayed2] = React.useState(false);\n  const audiosample3 = React.useRef(null)\n  const [played3, setPlayed3] = React.useState(false);\n\n  let {\n    error,\n    status,\n    mediaBlob,\n    stopRecording,\n    getMediaStream,\n    startRecording\n  } = useMediaRecorder({\n    recordScreen: false,\n    blobOptions: { type: 'audio/webm' },\n    mediaStreamConstraints: { audio: true }\n  });\n\n  useEffect(() => {\n    if (!mediaBlob) {\n      return\n    }\n    sendAudio()\n  }, [mediaBlob]); // Only re-run the effect if count changes\n\n  const sendAudio = () => {\n    const formData = new FormData();\n    // const imagefile = document.querySelector('#file');\n    formData.append(\"file\", mediaBlob);\n    axios.post(URL, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(resp => {\n      setResponse(resp.data)\n    }).catch(err => {\n      console.error('failed to receive response:', err)\n    })\n  }\n\n  const startPlaying = (url) => {\n    audioRef.current = new Audio(url)\n    audioRef.current.onended = (event) => {\n      stopPlaying()\n    }\n\n    audioRef.current.play()\n    setPlayed(true)\n  }\n\n  const stopPlaying = () => {\n    audioRef.current.pause()\n    setPlayed(false)\n  }\n\n  const startPlaying_sample = (url) => {\n    audiosample.current = new Audio(url)\n    audiosample.current.onended = (event) => {\n      stopPlaying_sample()\n    }\n\n    audiosample.current.play()\n    setPlayed2(true)\n  }\n\n  const stopPlaying_sample = () => {\n    audiosample.current.pause()\n    setPlayed2(false)\n  }\n\n  const startPlaying_sample3 = (url) => {\n    audiosample3.current = new Audio(url)\n    audiosample3.current.onended = (event) => {\n      stopPlaying_sample3()\n    }\n\n    audiosample3.current.play()\n    setPlayed3(true)\n  }\n\n  const stopPlaying_sample3 = () => {\n    audiosample3.current.pause()\n    setPlayed3(false)\n  }\n\n  // console.log(\"response:\",response)\n  const { output_path: audioURL, st_out: speechToText, translate_out: translatedText } = response || {}\n\n  return (\n    // 1 row\n    // 2 cols\n    // row: 0, col: 0 => persian box (text-editor, voice-recorder)\n    // row: 0, col: 1 => english box (text-editor, speaker)\n    // Row\n\n    <Container>\n      <br />\n      <br />\n      <br />\n      <Card >\n        <br />\n        <Row>\n          <Col>\n            <Card className=\"shadow-sm p-3 mb-5 bg-white rounded\">\n              <Card.Header>Persian</Card.Header>\n              <Card.Body>\n                <Form>\n                  <Form.Control\n                    as=\"textarea\"\n                    readOnly={true}\n                    style={{ height: '100px' }}\n                    value={speechToText}\n                  />\n                  <br />\n                  <ToggleButton\n                    id=\"toggle-recording\"\n                    type=\"checkbox\"\n                    variant=\"danger\"\n                    checked={recording}\n                    value=\"1\"\n                    style={{ width: \"32px\", height: \"32px\", padding: \"2px\" }}\n                    onChange={e => {\n                      if (recording) {\n                        stopRecording(e)\n                        // sendAudio()\n\n                      } else {\n                        startRecording(e)\n                      }\n                      setRecording(!recording)\n                    }}\n                  >\n                    {recording ?\n                      <Icon path={mdiStop} color=\"white\" />\n\n                      :\n                      <Icon path={mdiMicrophoneOutline} color=\"white\" />\n                    }\n                  </ToggleButton>\n                  {/* {mediaBlob && <audio src={URL.createObjectURL(mediaBlob)} controls />} */}\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"shadow-sm p-3 mb-5 bg-white rounded\">\n              <Card.Header>English</Card.Header>\n              <Card.Body>\n                <Form>\n                  <Form.Control\n                    as=\"textarea\"\n                    readOnly={true}\n                    style={{ height: '100px' }}\n                    value={translatedText}\n                  />\n                  <br />\n                  <ToggleButton\n                    id=\"toggle-playing\"\n                    type=\"checkbox\"\n                    variant=\"primary\"\n                    checked={played}\n                    value=\"1\"\n                    style={{ width: \"32px\", height: \"32px\", padding: \"2px\" }}\n                    onChange={e => {\n                      if (played) {\n                        stopPlaying()\n                      } else {\n                        startPlaying('/api/' + audioURL)\n                      }\n                    }}\n                  >\n                    {played ?\n                      <Icon path={mdiStop} color=\"white\" />\n\n                      :\n                      <Icon path={mdiPlayOutline} color=\"white\" />\n                    }\n                  </ToggleButton>\n                  {/* {mediaBlob && <audio src={URL.createObjectURL(mediaBlob)} controls />} */}\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n        {/* <br /> */}\n      </Card>\n      <br />\n      <br />\n      <Card>\n        <Row>\n          <Col>\n            <label> Input(Persian) </label>\n          </Col>\n          <Col>\n            <label> Reference translation(English) </label>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col>\n            <label>بیایید دوباره آن را امتحان کنیم</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing2\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played2}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played2) {\n                  stopPlaying_sample()\n                } else {\n                  startPlaying_sample(in4_sample)\n                }\n              }}\n            >\n              {played2 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n          <Col>\n            <label>let's try it again</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing3\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played3}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played3) {\n                  stopPlaying_sample3()\n                } else {\n                  startPlaying_sample3(out4_sample)\n                }\n              }}\n            >\n              {played3 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <label>بیایید دوباره آن را امتحان کنیم</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing2\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played2}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played2) {\n                  stopPlaying_sample()\n                } else {\n                  startPlaying_sample(in4_sample)\n                }\n              }}\n            >\n              {played2 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n          <Col>\n            <label>let's try it again</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing3\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played3}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played3) {\n                  stopPlaying_sample3()\n                } else {\n                  startPlaying_sample3(out4_sample)\n                }\n              }}\n            >\n              {played3 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <label>بیایید دوباره آن را امتحان کنیم</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing2\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played2}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played2) {\n                  stopPlaying_sample()\n                } else {\n                  startPlaying_sample(in4_sample)\n                }\n              }}\n            >\n              {played2 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n          <Col>\n            <label>let's try it again</label>\n            <br />\n            <ToggleButton\n              id=\"toggle-playing3\"\n              type=\"checkbox\"\n              variant=\"light\"\n              checked={played3}\n              value=\"1\"\n              style={{ width: \"32px\", height: \"32px\", padding: \"2px\", color: \"black\" }}\n              onChange={e => {\n                if (played3) {\n                  stopPlaying_sample3()\n                } else {\n                  startPlaying_sample3(out4_sample)\n                }\n              }}\n            >\n              {played3 ?\n                <Icon path={mdiStop} color=\"white\" />\n\n                :\n                <Icon path={mdiPlayOutline} color=\"white\" />\n              }\n            </ToggleButton>\n          </Col>\n        </Row>\n        <br />\n      </Card>\n    </Container>\n\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n   \nnavigator.mediaDevices.getUserMedia({video: false, audio: true})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}